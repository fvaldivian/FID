install.packages("ggplot2")
library(readr)
library(caret)
retail<-  read_csv("./supermarket_db.csv")
head(retail)
unique(retail$`Product line`)
electronic_data <- subset(retail, `Product line` == "Electronic accessories",select = c(`Product line`, `Unit price`, Total, Quantity))
healthbeauty_data <- subset(retail, `Product line` == "Health and beauty",select = c(`Product line`, `Unit price`, Total, Quantity))
home_data <- subset(retail, `Product line` == "Home and lifestyle",select = c(`Product line`, `Unit price`, Total, Quantity))
sportsravel_data <- subset(retail, `Product line` == "Sports and travel",select = c(`Product line`, `Unit price`, Total, Quantity))
food_data <- subset(retail, `Product line` == "Food and beverages",select = c(`Product line`, `Unit price`, Total, Quantity))
fashion_data <- subset(retail, `Product line` == "Fashion accessories",select = c(`Product line`, `Unit price`, Total, Quantity))
(healthbeauty_data)
set.seed(123)  # Esto es para reproducibilidad
trainIndex_elect <- createDataPartition(electronic_data$Total, p = 0.8, list = FALSE)
trainIndex_health <- createDataPartition(healthbeauty_data$Total, p = 0.8, list = FALSE)
trainIndex_home <- createDataPartition(home_data$Total, p = 0.8, list = FALSE)
trainIndex_sports <- createDataPartition(sportsravel_data$Total, p = 0.8, list = FALSE)
trainIndex_food <- createDataPartition(food_data$Total, p = 0.8, list = FALSE)
trainIndex_fashion <- createDataPartition(fashion_data$Total, p = 0.8, list = FALSE)
##ELECTRONICS
train_data_electronic<- electronic_data[trainIndex_elect, ]
test_data_electronic<- electronic_data[-trainIndex_elect, ]
##HEALTH AND BEAUTY
train_data_health<- healthbeauty_data[trainIndex_health, ]
test_data_health<- healthbeauty_data[-trainIndex_health, ]
##HOME AND LIFESTYLE
train_data_home<- home_data[trainIndex_home, ]
test_data_home<- home_data[-trainIndex_home, ]
##SPORTS AND TRAVEL
train_data_sports<- sportsravel_data[trainIndex_sports, ]
test_data_sports<- sportsravel_data[-trainIndex_sports, ]
##FOOD AND BEVERAGES
train_data_food<- food_data[trainIndex_food, ]
test_data_food<- food_data[-trainIndex_food, ]
##FASHIOn ACCESORIES
train_data_fashion<- fashion_data[trainIndex_fashion, ]
test_data_fashion<- fashion_data[-trainIndex_fashion, ]
##Hacer para cada subset para ver si hay valores faltantes
nrow(test_data_health)
missing_values <- colSums(is.na(train_data_health))
# Mostrar el número de valores faltantes por columna
print(missing_values)
k <- 5  # Número de vecinos a considerar
model_knn_electronic<- train(Total ~ `Unit price` + Quantity, data = train_data_electronic, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k), metric = "RMSE")
model_knn_HEALTH<- train(Total ~ `Unit price` + Quantity, data = train_data_health, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k), metric = "RMSE")
model_knn_home<- train(Total ~ `Unit price` + Quantity, data = train_data_home, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k), metric = "RMSE")
model_knn_sport<- train(Total ~ `Unit price` + Quantity, data = train_data_sports, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k), metric = "RMSE")
model_knn_food<- train(Total ~ `Unit price` + Quantity, data = train_data_food, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k), metric = "RMSE")
model_knn_fashion<- train(Total ~ `Unit price` + Quantity, data = train_data_fashion, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k), metric = "RMSE")
predictions_electronic <- predict(model_knn_electronic, newdata = test_data_electronic)
predictions_health <- predict(model_knn_HEALTH, newdata = test_data_health)
predictions_home <- predict(model_knn_home, newdata = test_data_home)
predictions_sports <- predict(model_knn_sport, newdata = test_data_sports)
predictions_food<- predict(model_knn_food, newdata = test_data_food)
predictions_fashion <- predict(model_knn_fashion, newdata = test_data_fashion)
# Evaluar el rendimiento de los modelos
RMSE_electronic <- sqrt(mean((predictions_electronic - test_data_electronic$Total)^2))
RMSE_health <- sqrt(mean((predictions_health - test_data_health$Total)^2))
RMSE_home<- sqrt(mean((predictions_home - test_data_home$Total)^2))
RMSE_sports <- sqrt(mean((predictions_sports - test_data_sports$Total)^2))
RMSE_food <- sqrt(mean((predictions_food - test_data_food$Total)^2))
RMSE_fashion <- sqrt(mean((predictions_fashion - test_data_fashion$Total)^2))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de electrónica es  :", RMSE_electronic, "."))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de salud y belleza es  :", RMSE_health, "."))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de hogar y estilo de vida es  :", RMSE_home, "."))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de deportes y viajes es  :", RMSE_sports, "."))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de alimetación y bebidas es  :", RMSE_food, "."))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de moda es :", RMSE_fashion, "."))
##hacer para cada conjunto de datos
nombres_modelos <- c("Electronic", "Health", "Home", "Sport", "Food", "Fashion")
lista_datos <- list(electronic_data, healthbeauty_data, home_data, sportsravel_data, food_data, fashion_data)
for (i in seq_along(lista_datos)) {
k_values <- seq(1, 20, by = 1)  # Rango de valores de k a probar
data <- lista_datos[[i]]
# Lista para almacenar los errores RMSE
errores <- vector("list", length(k_values))
# Entrenar modelos con diferentes valores de k
for (j in seq_along(k_values)) {
set.seed(123)  # Semilla para reproducibilidad
model_knn <- train(Total ~ `Unit price` + Quantity, data = data, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = k_values[j]), metric = "RMSE")
errores[[j]] <- model_knn$results$RMSE
}
# Encontrar el valor óptimo de k para el modelo actual
k_optimo <- k_values[which.min(unlist(errores))]
# Imprimir el valor óptimo de k para el modelo actual
cat("El valor óptimo de k para el modelo", nombres_modelos[i], "es:", k_optimo, "\n")
}
model_knn_electronic<- train(Total ~ `Unit price` + Quantity, data = train_data_electronic, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = 2), metric = "RMSE")
model_knn_HEALTH<- train(Total ~ `Unit price` + Quantity, data = train_data_health, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = 2), metric = "RMSE")
model_knn_home<- train(Total ~ `Unit price` + Quantity, data = train_data_home, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = 1), metric = "RMSE")
model_knn_sport<- train(Total ~ `Unit price` + Quantity, data = train_data_sports, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = 2), metric = "RMSE")
model_knn_food<- train(Total ~ `Unit price` + Quantity, data = train_data_food, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = 5), metric = "RMSE")
model_knn_fashion<- train(Total ~ `Unit price` + Quantity, data = train_data_fashion, method = "knn", trControl = trainControl(method = "cv"), preProcess = c("center", "scale"), tuneGrid = data.frame(k = 1), metric = "RMSE")
##Repetimos las predicciones los conjuntos de pruebas
predictions_electronic <- predict(model_knn_electronic, newdata = test_data_electronic)
predictions_health <- predict(model_knn_HEALTH, newdata = test_data_health)
predictions_home <- predict(model_knn_home, newdata = test_data_home)
predictions_sports <- predict(model_knn_sport, newdata = test_data_sports)
predictions_food<- predict(model_knn_food, newdata = test_data_food)
predictions_fashion <- predict(model_knn_fashion, newdata = test_data_fashion)
# Evaluar el rendimiento de los modelos
RMSE_electronic2 <- sqrt(mean((predictions_electronic - test_data_electronic$Total)^2))
RMSE_health2 <- sqrt(mean((predictions_health - test_data_health$Total)^2))
RMSE_home2<- sqrt(mean((predictions_home - test_data_home$Total)^2))
RMSE_sports2 <- sqrt(mean((predictions_sports - test_data_sports$Total)^2))
RMSE_food2 <- sqrt(mean((predictions_food - test_data_food$Total)^2))
RMSE_fashion2 <- sqrt(mean((predictions_fashion - test_data_fashion$Total)^2))
print(paste("Error RMSE en el modelo para productos de electrónica con k=2  es  :", RMSE_electronic2, ", mejora un ", (RMSE_electronic-RMSE_electronic2)/RMSE_electronic, "%"))
print(paste("Error RMSE en el modelo para productos de salud y bellezacon k=2  es  :", RMSE_health2, ", mejora un ", (RMSE_health-RMSE_health2)/RMSE_health, "%"))
print(paste("Error RMSE en el modelo para productos de hogar y estilo de vidacon k=1  es  :", RMSE_home2, ", mejora un ", (RMSE_home-RMSE_home2)/RMSE_home, "%"))
print(paste("Error RMSE en el modelo para productos de deportes y viajes con k=2  es  :", RMSE_sports2, ", mejora un ", (RMSE_sports-RMSE_sports2)/RMSE_sports, "%"))
print(paste("Error RMSE en el modelo para productos de alimetación y bebidas con k=5  es  :", RMSE_food2, ", mejora un ", (RMSE_food-RMSE_food2)/RMSE_food, "%"))
print(paste("Error 'Root Mean Squared Error' en el modelo para productos de moda con k=1  es  :", RMSE_fashion2, ", mejora un ", (RMSE_fashion-RMSE_fashion2)/RMSE_fashion, "%"))
#Realizar predicciones para cada tipo de producto
predictions_electronic <- predict(model_knn_electronic, newdata = test_data_electronic)
#predictions_fashion <- predict(model_fashion, newdata = test_data_fashion)
# ... (haz lo mismo para otros tipos de productos)
# Crear gráfico para Electronic accessories
plot(test_data_electronic$Total, predictions_electronic,
xlab = "Ventas reales", ylab = "Predicciones",
main = "Predicciones vs. Ventas reales para Electronic accessories")
abline(0, 1, col = "red")  # Línea de referencia (predicción = valor real)
# Mostrar otros gráficos para diferentes tipos de productos de manera similar
# ...
# Crear un gráfico que muestre las predicciones y el error para cada tipo de producto
plot(test_data_electronic$Total, predictions_electronic,
xlab = "Ventas reales", ylab = "Predicciones",
main = "Predicciones vs. Ventas reales para diferentes tipos de productos", col = "purple")
points(test_data_fashion$Total, predictions_fashion, col = "red")  # Agregar datos de moda
# Agregar datos de otros tipos de productos
points(test_data_health$Total, predictions_health, col = "green")
points(test_data_home$Total, predictions_home, col = "blue")
points(test_data_food$Total, predictions_food, col = "orange")
points(test_data_sports$Total, predictions_sports, col = "pink")
# Agregar más puntos para otros tipos de productos...
# Actualizar la leyenda con los valores RMSE de cada tipo de producto
legend("topright", legend = c(
paste("Electronic accessories (RMSE:", round(RMSE_electronic2, 2), ")"),
paste("Fashion accessories (RMSE:", round(RMSE_fashion2, 2), ")"),
paste("Health  (RMSE:", round(RMSE_health2, 2), ")"),
paste("Home and lifestyle (RMSE:", round(RMSE_home2, 2), ")"),
paste("Sports and travel (RMSE:", round(RMSE_sports2, 2), ")"),
paste("Food and Beverage (RMSE:", round(RMSE_food2, 2), ")")
),
col = c("purple", "red", "green", "blue","orange","pink"),
pch = 1)
abline(0, 1, col = "black")  # Línea de referencia (predicción = valor real)
# Función para calcular la predicción media
calculate_mean_prediction <- function(predictions) {
return(mean(predictions))
}
# Calcular la predicción media para cada tipo de producto
mean_prediction_electronic <- calculate_mean_prediction(predictions_electronic)
mean_prediction_fashion <- calculate_mean_prediction(predictions_fashion)
mean_prediction_sports <- calculate_mean_prediction(predictions_sports)
mean_prediction_food <- calculate_mean_prediction(predictions_food)
mean_prediction_health <- calculate_mean_prediction(predictions_health)
mean_prediction_home <- calculate_mean_prediction(predictions_home)
cat("La predicción media en $ para Electronic accessories es:", round(mean_prediction_electronic, 2), "\n")
cat("La predicción media en $ para Accesorios de Moda es:", round(mean_prediction_fashion, 2), "\n")
cat("La predicción media en $  para Deportes y Viajes  es:", round(mean_prediction_sports, 2), "\n")
cat("La predicción media en $ para Salud es:", round(mean_prediction_health, 2), "\n")
cat("La predicción media en $  para Hogar y Estilo de Vida es:", round(mean_prediction_home, 2), "\n")
cat("La predicción media en $ para Alimentación y bebida es:", round(mean_prediction_food, 2), "\n")
library(rpart)
library(psych)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(lubridate)
library(C50)
library(gmodels)
library(OneR)
retail<-  read_csv("./supermarket_db.csv")
head(retail)
retail$Date <- gsub('/', '-', retail$Date)
r2 <- retail %>%
mutate(DATE=mdy(Date))%>%
select(everything())
retailA<- filter(r2, Branch=='A')
retailB<- filter(r2, Branch=='B')
retailC<- filter(r2, Branch=='C')
head(retailA)
colnames(retail)
summary(retail$Rating)
retail2<-mutate(retail,
goodrating= ifelse(Rating>7.5, "Yes", "No"))
retail2$goodrating <- as.factor(retail2$goodrating)
retail2$Time <- gsub(':', '.', retail2$Time)
retail2 <- select(retail2, -(Rating))
retail2 <- select(retail2, -(Time))
retail2 <- retail2 %>%
mutate(DATE=mdy(Date))%>%
select(everything())
retail2 <- select(retail2, -(Date))
retail2 <- retail2 %>%
mutate(
Month=month(DATE)
)
retail2
retail2 <- select(retail2, -(DATE))
retail3<-select(retail2, Branch,'Customer type', Gender, 'Product line', 'Unit price', Quantity, Total, Month, goodrating)
set.seed(123)
indices_entrenamiento <- sample(1:nrow(retail3), 0.8 * nrow(retail3))
retail_train<- retail3[indices_entrenamiento, ]
retail_test <- retail3[-indices_entrenamiento, ]
prop.table(table(retail_test$goodrating))
prop.table(table(retail_train$goodrating))
retail_model <- C5.0(retail_train[-9], retail_train$goodrating)
retail_model
retail_pred <- predict(retail_model, retail_test)
CrossTable(retail_test$goodrating, retail_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
summary(retail_model)
install.packages("tidyverse")   #Utilizada para la manipulación eficiente de datos y visualización.
install.packages("visdat")      #Empleada para la búsqueda de valores nulos en los conjuntos de datos.
install.packages("ggplot2")     #Herramienta clave para la creación de visualizaciones atractivas y efectivas.
install.packages("corrplot")    #Utilizada para analizar y visualizar la correlación entre variables.
install.packages("NbClust")     #Biblioteca para realizar análisis de clustering.
install.packages("ggplot2")
install.packages("factoextra")  #Biblioteca para realizar análisis de clustering.
install.packages("ape")         #Utilizada para la representación gráfica de dendrogramas en análisis jerárquicos.
install.packages("clValid")     #Herramienta crucial para la comparación y validación de algoritmos en el análisis de clustering.
suppressPackageStartupMessages(library(dplyr))
library(tidyverse)
library(visdat)
library(ggplot2)
library(corrplot)
library(NbClust)
library(factoextra)
library(ape)
library(clValid)
#Leer dataset
sales_df <- read.table("./supermarket_db.csv", na.strings="", header=TRUE, sep=",", dec=".")
dim(sales_df)
head(sales_df)
str(sales_df)
#Mostrar si hay duplicados
sum(duplicated(sales_df))
#Mostrar si hay valores nulos (NA).
sum(is.na(sales_df))
#Resumen
summary(sales_df)
#Seleccionar columnas relevantes para el clustering.
features <- sales_df[, c("Unit.price", "Quantity", "Tax.5.", "Total", "Rating")]
head(features)
lapply(features, class)
summary(features)
#Estandarizar los datos
scaled_data <- scale(features)
summary(scaled_data)
fviz_nbclust(scaled_data, FUN = kmeans, method = "silhouette")
fviz_nbclust(scaled_data, FUN = kmeans, method = "wss")
fviz_nbclust(scaled_data, FUN = kmeans, method = "gap_stat")
#Aseguramos la reproducibilidad, establecemos la semilla del generador de números aleatorios
seed_val <- 123
set.seed(seed_val)
# Número de clusters
k = 3
#Aplicamos k-means
sales_clust <- kmeans(scaled_data, centers = k)
#Ejemplos por grupos
sales_clust$size
#Incorporamos una columna adicional que indica el número del clúster al cual pertenece cada ejemplo.
sales_df$Cluster <- as.factor(sales_clust$cluster)
#Crear gráfica
ggplot(sales_df, aes(x = Unit.price, y = Quantity, color = Cluster)) +
geom_point() +
labs(title = "Agrupación mediante K-means de las Ventas en Supermercados.",
x = "Precio Unitario", y = "Cantidad") +
theme_minimal()
fviz_nbclust(scaled_data, FUN = hcut, method = "silhouette")
fviz_nbclust(scaled_data, FUN = hcut, method = "wss")
fviz_nbclust(scaled_data, FUN = hcut, method = "gap_stat")
hier_complete <- hclust(dist(scaled_data), method= 'complete')
plot(hier_complete, cex = 0.6, hang = -1)
plot(hier_complete, cex = 0.6, hang = -1)
rect.hclust(hier_complete, k = 2, border = 2:3)
s_clusters <- cutree(hier_complete, k = 2)
fviz_cluster(list(data = as.matrix(scaled_data), cluster = s_clusters), labels = 4)
hier_single <- hclust(dist(scaled_data), method= 'single')
plot(hier_single, cex = 0.6, hang = -1)
plot(hier_single, cex = 0.6, hang = -1)
rect.hclust(hier_single, k = 2, border = 2:3)
sample_clusters <- cutree(hier_single, k = 2)
fviz_cluster(list(data = as.matrix(scaled_data), cluster = sample_clusters), labels = 4)
comparison <- clValid(
obj = scaled_data,
nClust = 2:4,
clMethods = c("hierarchical", "kmeans"),
validation = c("stability", "internal"),
maxitems=nrow(scaled_data)
)
print(summary(comparison))
